import React from "react";

import "./style/mainPage.css";

class MainPage extends React.PureComponent {
  render() {
    return (
      <div>
        <table>
          <tbody>
            <tr>
              <td>Динамичность веб-страниц </td>
              <td>
                Веб-страница подстраивается под действия пользователя. В
                зависимости от URL-а подсвечиваются активные блоки. Также все
                блоки подсвечиваются при наведении - удалении курсора мыши. На
                страницах регистрации пользователя и добавления товаров имеется
                валидация полей по различным правилам. При невалидности полей -
                кнопки подтверждения блокируются.
              </td>
            </tr>
            <tr>
              <td>Производительность отрисовки</td>
              <td>Отрисовка происходит без задержек.</td>
            </tr>
            <tr>
              <td> Навигация в приложении </td>
              <td>
                Кнопки навигации работают корректно. Присуствует постраничный
                просмотр списков. При постраничном просмотре количество страниц
                подстраивается под длину списка.
              </td>
            </tr>
            <tr>
              <td> Кроссбраузерность </td>
              <td>
                Приложение полностью работоспосбно на современных браузерах и
                мобильных устройствах. Адаптивной верстки нет.
              </td>
            </tr>
            <tr>
              <td>Коммуникации </td>
              <td>
                Все списки подгружаются AJAX-запросами. При фильтрации,
                сортировке, изменении секции данные фильруются/сортируются с
                помощью REST API. При постраничном разбиении URL зависит от
                номера страницы. После регистрации данные пользователя
                подгружатся на сервер POST запросом. Если пользователь покидает
                свой аккаунт - содержимое его корзины сохраняется на сервер
                PATCH запросом, а после возвращения пользователя корзина снова
                заполняется товарами.
              </td>
            </tr>
            <tr>
              <td> Модель данных </td>
              <td>
                Объемные данные подгружаются через AJAX и затем отправляются на
                хранение в Store Redux. Store разбит на разделы, для более
                удобной работы.
              </td>
            </tr>
            <tr>
              <td> Сборка проекта </td>
              <td>
                {" "}
                Проект собирается автоматически. В связи с отсуствием back-end
                части потребуется создать фейк=сервер командой <br />
                <b>json-server --watch public/db.json --port 3004</b>
                <br />
                prod-сборка делается командой <br />
                <b>npm run build</b>
              </td>
            </tr>
            <tr>
              <td> Тесты </td>
              <td>Тестов пока нет(</td>
            </tr>
          </tbody>
        </table>
      </div>
    );
  }
}

export default MainPage;
